#
#  Copyright 2022 Davide Bettio <davide@uninstall.it>
#
#  SPDX-License-Identifier: Apache-2.0 OR LGPL-2.1-or-later
#

name: Build and Test on Other Architectures

on:
  push:
    paths-ignore:
      - 'src/platforms/esp32/**'
      - 'src/platforms/stm32/**'
      - 'doc/**'
      - 'LICENSES/**'
  pull_request:
    paths-ignore:
      - 'src/platforms/esp32/**'
      - 'src/platforms/stm32/**'
      - 'doc/**'
      - 'LICENSES/**'

env:
  otp_version: 24
  elixir_version: 1.14

jobs:
  build-and-test-other:
    runs-on: ubuntu-20.04

    strategy:
      matrix:
        arch: ["armel", "armhf", "arm64"]

        include:
        - arch: "armel"
          distro: "stretch"
          base_url: "http://archive.debian.org/debian-archive/debian/"
          cflags: "-O2 -mthumb -mthumb-interwork -march=armv4t"
          additional_packages: |
            http://ftp.us.debian.org/debian/pool/main/c/cmake/cmake-data_3.13.2-1~bpo9+1_all.deb \
            http://ftp.us.debian.org/debian/pool/main/r/rhash/librhash0_1.3.8-1_armel.deb \
            http://ftp.us.debian.org/debian/pool/main/libu/libuv1/libuv1_1.34.2-1~bpo9+1_armel.deb \
            http://ftp.us.debian.org/debian/pool/main/c/cmake/cmake_3.13.2-1~bpo9+1_armel.deb

        - arch: "armhf"
          distro: "bullseye"
          base_url: "http://deb.debian.org/debian/"
          cflags: "-mcpu=cortex-a7 -mfloat-abi=hard -O2 -mthumb -mthumb-interwork"

        - arch: "arm64"
          distro: "bullseye"
          base_url: "http://deb.debian.org/debian/"
          cflags: "-O2"

        # It looks like we don't really support big-endian
        # - arch: "powerpc"
        #  distro: "jessie"
        #  base_url: "http://archive.debian.org/debian"
        #  cflags: "-std=gnu99 -Os"

    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        submodules: 'recursive'

    - uses: erlef/setup-beam@v1
      with:
        otp-version: ${{ env.otp_version }}
        elixir-version: ${{ env.elixir_version }}
        hexpm-mirrors: |
            - https://cdn.jsdelivr.net/hex
            - https://repo.hex.pm
            - https://builds.hex.pm

    - name: apt update
      run: sudo apt update

    - name: Install required packages
      run: sudo apt install debootstrap gperf cmake

    - name: Set up QEMU
      run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

    - uses: actions/cache@v2
      id: cache
      with:
        path: debian-${{ matrix.arch }}.tar
        key: ${{ matrix.arch}}-${{ matrix.distro }}-${{ hashFiles('.github/workflows/build-and-test-other.yaml') }}

    - name: Bootrap Debian filesystem
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        set -euo pipefail
        sudo mkdir debian
        sudo debootstrap --no-check-gpg --arch ${{ matrix.arch }} \
          --include=file,gcc,g++,binutils,cmake,make,doxygen,gperf,zlib1g-dev,libssl-dev \
          ${{ matrix.distro }} debian ${{ matrix.base_url }}
        sudo dpkg --root debian --add-architecture ${{Â matrix.arch }}
        for pkg in ${{ matrix.additional_packages }}
        do
            additional_packages=1
            sudo wget ${pkg}
        done
        [ ${additional_packages:-} ] && sudo dpkg --root debian --force-depends -i *.deb
        sudo tar -C debian -c . > debian-${{ matrix.arch }}.tar
        sudo rm -fr debian-${{ matrix.arch }}

    - name: Import docker container image
      run: |
        sudo docker import debian-${{ matrix.arch }}.tar debian-${{ matrix.arch }}

    - name: "Build: Tests"
      run: |
        mkdir build_tests
        cd build_tests
        cmake ..
        make erlang_test_modules
        make test_estdlib
        make test_eavmlib
        make test_alisp

    - name: "Build and Test: AtomVM on foreign arch"
      timeout-minutes: 15
      run: |
        docker run --rm -v $PWD:/atomvm -w /atomvm \
        -e CFLAGS="${{ matrix.cflags }}" -e CXXFLAGS="${{ matrix.cflags }}" \
        debian-${{ matrix.arch }} /bin/bash -c '
        file /bin/bash &&
        uname -a &&
        cc --version &&
        ld --version &&
        ldd --version &&
        echo $CFLAGS &&
        echo $CXXFLAGS &&
        cmake --version &&
        mkdir -p build &&
        cd build &&
        cmake .. &&
        cp ../build_tests/tests/erlang_tests/*.beam tests/erlang_tests/ &&
        cp ../build_tests/tests/libs/estdlib/*.avm tests/libs/estdlib/  &&
        cp ../build_tests/tests/libs/eavmlib/*.avm tests/libs/eavmlib/ &&
        cp ../build_tests/tests/libs/alisp/*.avm tests/libs/alisp/ &&
        make AtomVM &&
        make test-erlang &&
        file ./tests/test-erlang &&
        ./tests/test-erlang &&
        file ./src/AtomVM &&
        ./src/AtomVM tests/libs/estdlib/test_estdlib.avm &&
        ./src/AtomVM tests/libs/eavmlib/test_eavmlib.avm &&
        ./src/AtomVM tests/libs/alisp/test_alisp.avm
        '
