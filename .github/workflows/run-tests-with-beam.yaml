#
#  Copyright 2022 Paul Guyot <pguyot@kallisys.net>
#
#  SPDX-License-Identifier: Apache-2.0 OR LGPL-2.1-or-later
#

name: Run tests with BEAM

on:
  push:
    paths-ignore:
      - 'src/platforms/esp32/**'
      - 'src/platforms/stm32/**'
      - 'doc/**'
      - 'LICENSES/**'
  pull_request:
    paths-ignore:
      - 'src/platforms/esp32/**'
      - 'src/platforms/stm32/**'
      - 'doc/**'
      - 'LICENSES/**'

jobs:
  run-tests:
    runs-on: "ubuntu-22.04"
    container: ${{ matrix.container }}
    strategy:
      fail-fast: false
      matrix:
        include:
        - checkout: "OTP-25.0"
        - checkout: "OTP-26.0-rc1"
        # Wed Feb 15 10:09:32 2023 +0100
        - checkout: 127026003180a834e9fa5d5919c824a184faeb92
        # Tue Jan 31 19:36:13 2023 +0100
        - checkout: 197801a62c1782bf18a294b21a709f1cf2ca2633
        # Mon Feb 6 07:18:19 2023 +0100
        - checkout: e5e21c3964488d6dfa6551d6673bc757781980a6
        # Tue Feb 7 09:47:41 2023 +0100
        - checkout: ccb87145accc45f5177708b664e160fdef256425
        # Wed Feb 8 07:28:49 2023 +0800
        - checkout: 00cfb44f8535752ca25f32ac8d12e094adc04323
        # Thu Feb 9 09:13:02 2023 +0100
        - checkout: a1d3c6b6ead794291078e3da635161cb6e3aebcb
        # Fri Feb 10 03:08:11 2023 +0100
        - checkout: f36b268b1cc80c96aee2e64d6174fd50479c5dc3
        # Sat Feb 11 09:46:52 2023 +0100
        - checkout: c21b6f080845db2afdc52ae0a5d920a0d2078bd3
        # Mon Feb 13 08:59:34 2023 +0100
        - checkout: 7c4d38c31213698e92a37d3c5ffaecc03342571d
        # Tue Feb 14 08:43:31 2023 +0100
        - checkout: bad27f1cdb7cf3534490dcec17b4e4a49754e4ce
        # Wed Feb 15 02:44:39 2023 -0500
        - checkout: d47fc50422d050612e447d4439b27a01c29f46ce
    steps:
    # Setup
    - name: "Checkout repo"
      uses: actions/checkout@v3

    - name: "Fetch source using erlang/otp git repo"
      run: |
        set -eux
        git clone https://github.com/erlang/otp.git
        cd otp
        git checkout ${{ matrix.checkout }}

    - name: "Build from source and install with another prefix"
      run: |
        set -eux
        cd otp
        export PIE_CFLAGS=-fpie
        export PIE_LDFLAGS=-pie
        ./configure --with-ssl --enable-dirty-schedulers
        make -j
        make -j release
        cd release/x86_64-pc-linux-gnu
        ./Install -minimal $PWD

    - name: "Test compile module and test it"
      timeout-minutes: 10
      run: |
        set -eux
        test -e otp/bin && export PATH=${PWD}/otp/bin:${PATH}
        test -e /opt/hostedtoolcache/otp-source/bin && export PATH=/opt/hostedtoolcache/otp-source/bin:${PATH}
        test -e otp/release/x86_64-pc-linux-gnu/bin && export PATH=${PWD}/otp/release/x86_64-pc-linux-gnu/bin:${PATH}
        which erl
        which erlc
        erl=`which erl`
        installed_path=`dirname $erl`
        installed_path=`dirname $installed_path`
        find $installed_path -name beam.smp -exec md5sum \{\} \;
        erl -version
        erl -eval 'io:format("~s", [erlang:system_info(system_version)]), init:stop().' -noshell
        erlc tests/erlang_tests/test_gc.erl
        erl -pa . -eval 'erlang:process_flag(trap_exit, false), test_gc:start(), erlang:halt(0).' -noshell
        erl -pa . -eval 'R = test_gc:start(), S = 0, erlang:halt(S).' -noshell
        erl -pa . -eval 'R = test_gc:start(), S = if R =:= 0 -> 0; true -> 1 end, erlang:halt(S).' -noshell
        erl -pa . -eval 'R = test_gc:start(), S = if R =:= 0 -> 0; true -> io:format("Expected ~B, got ~p~n", [0, R]), 1 end, erlang:halt(S).' -noshell
        erl -pa . -eval 'erlang:process_flag(trap_exit, false), R = test_gc:start(), S = if R =:= 0 -> 0; true -> io:format("Expected ~B, got ~p~n", [0, R]), 1 end, erlang:halt(S).' -noshell
